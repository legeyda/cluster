---
- hosts: k8s-controllers
  gather_facts: no
  tasks:

    - name: configure cluster settings for makefile
      delegate_to: localhost
      run_once: yes
      copy: 
        content: "{{ ','.join(groups[cluster_group_name | default('cluster')] | default(ansible_play_batch) }}"
        dest: '{{playbook_dir}}/target/cluster_hosts'

    - name: ensure directories
      file:
        path: '{{item}}'
        state: directory
      with_items:
        - /usr/local/bin
        - /var/lib/kubernetes
        - /etc/kubernetes/config
        - /etc/systemd/system

    - name: certificates
      when: 'is_cluster_secure|default(True)|bool'
      block:
      - name: ensure certificates are generated
        run_once: yes
        delegate_to: localhost
        make:  
          chdir: '{{playbook_dir}}'
          target: 'target/cert/system/{{item}}'
        with_items: &cert_file_names
            - ca.pem
            - ca-key.pem
            - kubernetes.pem
            - kubernetes-key.pem
            - admin.pem
            - admin-key.pem
            - kube-controller-manager.pem
            - kube-controller-manager-key.pem
            - kube-proxy.pem
            - kube-proxy-key.pem
            - kube-scheduler.pem
            - kube-scheduler-key.pem
            - service-account.pem
            - service-account-key.pem

      - name: copy certificates
        copy: 
          src:  '{{playbook_dir}}/target/cert/system/{{item}}'
          dest: '/var/lib/kubernetes/{{item}}'
          backup: yes
        with_items: *cert_file_names

    - name: kube-scheduler config
      template: 
        src:  '{{playbook_dir}}/src/config/kube-scheduler.yaml'
        dest: /etc/kubernetes/config/kube-scheduler.yaml

    # let us have no encryption
    # todo: https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/06-data-encryption-keys.md

    - name: binaries
      block:
      - name: ensure binaries are available
        run_once: yes
        delegate_to: localhost
        make:  
          chdir: '{{playbook_dir}}'
          target: 'target/lib/linux/arm/{{item}}'
        with_items: &kube-apps
          - kube-apiserver
          - kube-controller-manager
          - kube-scheduler
          - kubectl

      - name: copy binaries
        copy:
          src:  '{{playbook_dir}}/target/lib/linux/arm/{{item}}'
          dest: '/usr/local/bin/{{item}}'
          mode: '+x'
        with_items: *kube-apps


    - name: kubeconfigs
      blocks:
        - shell: kubectl config set-cluster k8s-cluster > 
                 --certificate-authority=/var/lib/kubernetes/ca.pem
                 --embed-certs=true
                 --server=https://127.0.0.1:6443
                 --kubeconfig=/var/lib/kubernetes/{{item.id}}.kubeconfig
          with_items: &kube_role_names
            - {id: 'admin',                   cn: 'admin'}
            - {id: 'kube-controller-manager', cn: 'kube-controller-manager'}
            - {id: 'kube-proxy',              cn: 'system:kube-proxy'}
            - {id: 'kube-scheduler',          cn: 'system:kube-scheduler'}

        - shell: kubectl config set-credentials {{item.id}} >
                --client-certificate=/var/lib/kubernetes/ca.pem
                --client-key=/var/lib/kubernetes/{{item.id}}-key.pem
                --embed-certs=true
                --kubeconfig=/var/lib/kubernetes/{{item.id}}.kubeconfig
          with_items: *kube_role_names

        - shell: kubectl config set-context default >
                 --cluster=k8s-cluster
                 --user={{item.cn}}
                 --kubeconfig=/var/lib/kubernetes/{{item.id}}.kubeconfig
          with_items: *kube_role_names

        - shell: kubectl config use-context default --kubeconfig=/var/lib/kubernetes/{{item.id}}.kubeconfig
          with_items: *kube_role_names'


    - name: rbac role definitions
      copy:
        src: '{{playbook_dir}}/src/config/{{item}}'
        dest: '/etc/kubernetes/config/{{item}}'
      with_items:
        - rbac-role.yaml
        - rbac-binding.yaml

    - name: copy kube-scheduler config
      copy: 
        src:  '{{playbook_dir}}/src/config/kube-scheduler.yaml'
        dest: '/etc/kubernetes/config/kube-scheduler.yaml'
        mode: 644

    - name: systemd services
      block:
      - name: create systemd services
        template: 
          src:  '{{playbook_dir}}/src/systemd/{{item}}.service.j2'
          dest: '/etc/systemd/system/{{item}}.service'
          mode: 644
        with_items: &systemd_services
          - kube-apiserver
          - kube-controller-manager
          - kube-scheduler
          - k8s-apply-configs

      - name: start systemd services
        systemd:
          daemon_reload: yes
          name: etcd
          enabled: yes
          state: restarted
          masked: no
        with_items: *systemd_services

    - name: check cluster status
      block:
      - pause: 
          seconds: 20
          prompt: etcd cluster is started, wait a bit till it's up
      - shell: curl --cacert /var/lib/kubernetes/ca.pem https://127.0.0.1:6443/version
        register: kube_version
      - debug:
          msg: '{{kube_version.stdout}}'