
- name: 'get stat for {{cert_dir}}/cert.pem'
  stat:
    path: '{{cert_dir}}/cert.pem'
  register: gen_cert_stat_result

- name: generate remote certifiicate signed with local ca
  when: gen_cert_stat_result.stat.exists == False
  block:

    - name: generate cert request on remote
      block:
        - name: ensure remote dir exists
          file: 
            path: '{{cert_dir}}'
            state: directory
            recurse: yes

        - name: 'upload cert config to {{cert_dir}}/config.json'
          template:
            src: '{{ config_template | default(role_path + "/templates/config.json.j2") }}'
            dest: '{{cert_dir}}/config.json'

        - name: 'update cert request {{cert_dir}}/csr.json'
          template: 
            src:  '{{csr_template | default(role_path + "/templates/csr.json.j2") }}'
            dest: '{{cert_dir}}/csr.json'
            mode: 644

        - name: 'generate cert request {{cert_dir}}/cert.csr remotely'
          shell:
            cmd: >
                /usr/local/bin/cfssl gencert -initca {{cert_dir}}/csr.json |
                /usr/local/bin/cfssljson -bare {{cert_dir}}/cert
            chdir: '{{cert_dir}}'


    - name: fetch and sign cert request with local ca
      block:
        - name: make local directories
          delegate_to: localhost
          run_once: yes
          become: no
          file: {path: '{{playbook_dir}}/target/fetch', state: directory, recurse: yes}

        - name: fetch cert request for local signing
          fetch:
            src: '{{cert_dir}}/cert.csr'
            dest: '{{playbook_dir}}/target/fetch'
          register: fetch_result

        - include_role:
            name: local-sign-cert-request
          vars: 
            sign_request: '{{fetch_result.dest}}'

    - name: copy back to remote signed certificate for {{cert_dir}}
      copy:
        src: '{{fetch_result.dest|dirname}}/{{fetch_result.dest|basename|splitext|first}}.pem'
        dest: '{{cert_dir}}'
        backup: yes
