- name: 'get stat for {{cert_dir}}/cert.pem'
  stat:
    path: '{{cert_dir}}/cert.pem'
  register: gen_cert_stat_result

- name: generate remote certifiicate signed with local ca
  when: gen_cert_stat_result.stat.exists == False
  block:

    - name: generate cert request on remote and fetch
      block:
        - name: ensure remote dir exists
          file: 
            path: '{{cert_dir}}'
            state: directory
            recurse: yes

        - name: 'upload cert config to {{cert_dir}}/config.json'
          template:
            src: '{{ config_template | default(role_path + "/templates/config.json.j2") }}'
            dest: '{{cert_dir}}/config.json'

        - name: 'update cert request {{cert_dir}}/csr.json'
          template: 
            src:  '{{csr_template | default(role_path + "/templates/csr.json.j2") }}'
            dest: '{{cert_dir}}/csr.json'

        - name: 'generate cert request {{cert_dir}}/cert.csr remotely'
          shell:
            cmd: >
                /usr/local/bin/cfssl gencert -initca {{cert_dir}}/csr.json |
                /usr/local/bin/cfssljson -bare {{cert_dir}}/cert
            chdir: '{{cert_dir}}'

        - name: fetch cert request for local signing
          fetch:
            src: '{{cert_dir}}/cert.csr'
            dest: '{{playbook_dir}}/target/fetch'
          register: fetch_result

    - name: '(copy request to ca host and) sign cert request with ca'
      delegate_to: localhost
      become: no
      block:
        - set_fact:
            sign_request: '{{fetch_result.dest}}'
        - set_fact:
            cert_host_list: >-
              {%- for hostname in cert_hostnames|default(['localhost', internal_hostname|default(inventory_hostname)])|select('defined') -%}
                {{hostname}}{%- if not loop.last -%},{%- endif -%}
              {%- endfor -%}

        - name: sign cert request locally with ca private key
          shell: >-
            '{{playbook_dir}}/target/bin/cfssl' sign \
                    '-ca={{playbook_dir}}/target/cert/ca/cert.pem' \
                    '-ca-key={{playbook_dir}}/target/cert/ca/cert-key.pem' \
                    '-config={{playbook_dir}}/target/cert/ca/config.json' \
                    '-profile={{config_profile|default('default')}}' \
                    -hostname={{cert_host_list}} \
                    '{{sign_request}}' | \
                '{{playbook_dir}}/target/bin/cfssljson' -bare '{{sign_request|dirname}}/{{sign_request|basename|splitext|first}}'
                  
    - name: copy back to remote signed certificate for {{cert_dir}}
      copy:
        src: '{{sign_request|dirname}}/{{sign_request|basename|splitext|first}}.pem'
        dest: '{{cert_dir}}'
        backup: yes
